@model RoleModel

@{
	ViewBag.Title = "Role Add/Edit";
}

<div style="display: none">
	<div id="formPrettyValidationSummary">
		@Html.ValidationSummary(true, "")
	</div>
</div>

@using (Html.BeginForm()) {
	@Html.AntiForgeryToken()
	@Html.HiddenFor(model => model.Role.RoleId)

	<fieldset class="fieldset-med">
		<legend>
			<label>
				Role @Html.Partial("_displayErrorPopupButton")
			</label>
		</legend>
		<p>
			name:
			@if (Model.CanEditRoleName) {
				@Html.TextBoxFor(model => model.Role.RoleName, new { @class = "form-control-lg" })
				@Html.ValidationMessageFor(model => model.Role.RoleName, "", new { @class = "validationError" })
			} else {
				@Model.Role.RoleName
				@Html.HiddenFor(model => model.Role.RoleName)
			}
		</p>
		<p>
			<br />
			@if (Model.CanEditRoleName) {
				<input name="btnSave" type="submit" id="btnSave" value="Save" />
			}
			<input name="btnCancel" type="button" id="btnCancel" value="Cancel" onclick="javascript:window.location='@SiteFilename.RoleIndexURL';" />
			<br />
		</p>
	</fieldset>
}

@if (Model.Role.RoleId != Guid.Empty.ToString().ToLowerInvariant()) {
	<div id="pnlUsers">
		<div>
			@using (Html.BeginForm("RoleAddUser", CmsRouteConstants.CmsController.Admin)) {
				@Html.AntiForgeryToken()
				@Html.HiddenFor(model => model.Role.RoleId)
				@Html.HiddenFor(model => model.Role.RoleName)

				<fieldset class="fieldset-med">
					<legend>
						<label>
							Add Users @Html.Partial("_displayErrorPopupButton")
						</label>
					</legend>

					<script src="~/Assets/Admin/Includes/FindUsers.js" type="text/javascript"></script>
					<script type="text/javascript">
						$(document).ready(function () {
							initFindUsers("@Html.IdFor(m => m.NewUserId)", "txtSearch");
						});
					</script>

					<div style="width: 600px;">
						<p>
							Search for users to add to this role. Search by either username or email address.
						</p>
						<table style="width: 99%;">
							<tr>
								<td style="width: 500px;">
									<p>
										<b>Search:</b> <span id="spanResults"></span><br />
										<span style="white-space: nowrap;">
											<input name="txtSearch" type="text" maxlength="100" size="65" id="txtSearch" class="form-control-xlg" />
											@Html.ValidationMessageFor(m => m.NewUserId, "", new { @class = "validationError" })
											@Html.HiddenFor(m => m.NewUserId)
										</span>
									</p>
								</td>
								<td>
									<p style="text-align: right;">
										<input type="submit" name="btnAddUsers" value="Add User" id="btnAddUsers" />
									</p>
								</td>
							</tr>
						</table>
					</div>
				</fieldset>
			}
		</div>
		<div>
			@using (Html.BeginForm("RoleRemoveUsers", CmsRouteConstants.CmsController.Admin)) {
				@Html.AntiForgeryToken()
				@Html.HiddenFor(model => model.Role.RoleId)
				@Html.HiddenFor(model => model.Role.RoleName)
				<fieldset class="fieldset-med">
					<legend>
						<label>
							Users @Html.Partial("_displayErrorPopupButton")
						</label>
					</legend>
					<br />
					<div>
						@{
							var grid = CarrotWeb.CarrotWebGrid<UserModel>(Model.Users);
							grid.SetTableAttributes(new { @class = "datatable" }, new { @class = "tablehead" }, null);
							grid.EmptyDataTemplate = @<text><p> <b>No records found.</b> </p></text>;
							grid.UseDataPage = false;
							grid.ConfigName(Html.NameFor(x => x.Users));

							grid.AddColumn(new CarrotGridTemplateColumn<UserModel> {
								HasHeadingText = false,
								FormatTemplate = @<text> @grid.FormFieldFor(m => m.Selected, GridFormFieldType.Checkbox)
										@grid.FormFieldFor(m => m.User.UserName, GridFormFieldType.Hidden)
										@grid.FormFieldFor(m => m.User.UserKey, GridFormFieldType.Hidden)
										@grid.FormFieldFor(m => m.User.UserId, GridFormFieldType.Hidden)
										@grid.FormFieldFor(m => m.User.Email, GridFormFieldType.Hidden)
										@grid.FormFieldFor(m => m.User.FullName_FirstLast, GridFormFieldType.Hidden)</text>
								})
							.AddColumn(x => x.User.UserName, new CarrotGridColumn())
							.AddColumn(x => x.User.FullName_FirstLast, new CarrotGridColumn())
							.AddColumn(x => x.User.Email, new CarrotGridColumn());

							@grid.OutputHtmlBody()
						}
					</div>

					@if (Model.Users.Any()) {
						<br />
						<p>
							<input type="submit" name="btnRemove" value="Remove Selected" id="btnRemove" />
						</p>
					}
					<br />
				</fieldset>

			}
		</div>
	</div>
}

<script type="text/javascript">
	$(document).ready(function () {
		cmsInputEnterBlock();
	});
</script>
